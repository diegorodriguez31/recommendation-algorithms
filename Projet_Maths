#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#Filtrage collabortatif
import numpy as np
import csv
from math import *

#Lire le fichier csv et le mettre dans un tableau
def lecture_csv():
    n = 100
    m = 1000
    
    
    fichier = './toy_incomplet.csv'
    donnees = np.zeros((n,m))
    i = 0
    with open(fichier, 'rb') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        for row in spamreader:
           for j in range(m):
               donnees[i,j] = row[j]
           i+=1
    return donnees

donnees = lecture_csv()
           
"""    Recuperer une selection d'informations sur laquelle va se baser le systeme de filtrage
    La première consiste a recueillir de l'information
    La seconde consiste a batir une matrice contenant l'information.
    La troisieme à extraire a partir de cette matrice une liste de suggestions"""
    
    

    

"""Pour un filtrage base sur l’utilisateur, il faut definir une mesure de la similarite entre utilisateurs, et une
facon d’agreger les notes attribuees par les utilisateurs similaires.
    Chercher des utilisateurs qui ont les memes comportements avec l'utilisateur a qui l'on souhaite faire des recommandations
    Utiliser les notes des utilisateurs similaires pour calculer une liste de recommandations pour cet utilisateur."""
    
    
    
    
#Calcul de la similarité

def calculSimilarite(donnees,user1,user2):
    r = numerateurPearson(donnees,user1,user2)/(normePearson(donnees,user1,user2)*normePearson(donnees,user2,user1))
    print r
    
        #r=numerateur/normei*normej

def numerateurPearson(donnees,user1,user2):
    sommeUser1 = 0
    sommeUser2 = 0
    nombreItem = 0
    for i in range(np.shape(donnees)[1]):
        if donnees[user1][i] != -1 and donnees[user2][i] != -1:
            sommeUser1 += donnees[user1][i]
            sommeUser2 += donnees[user2][i]
            nombreItem = nombreItem + 1
    moyenneUser1 = sommeUser1/nombreItem
    moyenneUser2 = sommeUser2/nombreItem
    numerateur = 0
    for i in range(np.shape(donnees)[1]):
        if donnees[user1][i] != -1 and donnees[user2][i] != -1:
            numerateur += (donnees[user1][i] - moyenneUser1)*(donnees[user2][i] - moyenneUser2)
    return numerateur



def normePearson(donnees,user1,user2):
    norme = 0
    for i in range(np.shape(donnees)[1]):
        if donnees[user1][i] != -1 and donnees[user2][i] != -1:
            norme += (donnees[user1][i] - moyenneUser1)*(donnees[user1][i] - moyenneUser1)
    return sqrt(norme)
    
def moyennePearson(somme,nb):
    sommeUser1 = 0
    sommeUser2 = 0
    nombreItem = 0
    for i in range(np.shape(donnees)[1]):
        if donnees[user1][i] != -1 and donnees[user2][i] != -1:
            sommeUser1 += donnees[user1][i]
            sommeUser2 += donnees[user2][i]
            nombreItem = nombreItem + 1
    moyenneUser1 = sommeUser1/nombreItem
    moyenneUser2 = sommeUser2/nombreItem

calculSimilarite(donnees,0,1)

    
    
    
    
    
    
    
    
    
    
    
    
    
    
     

"""Pour un filtrage base sur l’item, il faut definir une mesure de la similarite entre items. Plusieurs options sont possibles pour les mesures de similarite."""

"""Le systeme de filtrage collaboratif a ete popularise par Amazon avec la fonctionnalite "les gens qui ont achete x ont aussi achete y". 
    Le systeme d'Amazon etait un systeme passif qui se basait sur les achats des gens pour construire la matrice de relation entre les objets.

    Batir une matrice item-item déterminant des relations entre des objets "pairs"
    Utiliser cette matrice pour proposer des objets."""
    
    

