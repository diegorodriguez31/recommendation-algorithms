#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import numpy as np
import csv
import pickle
import random
from math import fabs
from math import log
from scipy import stats

# Lire le fichier csv et le mettre dans un tableau
def lecture_csv():
    n = 100
    m = 1000

    fichier = './toy_incomplet.csv'
    donnees = np.zeros((n, m))
    i = 0
    with open(fichier, 'rb') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        for row in spamreader:
            for j in range(m):
                donnees[i, j] = row[j]
            i += 1
    return donnees


donnees = lecture_csv()

"""    Recuperer une selection d'informations sur laquelle va se baser le systeme de filtrage
    La première consiste a recueillir de l'information
    La seconde consiste a batir une matrice contenant l'information.
    La troisieme à extraire a partir de cette matrice une liste de suggestions"""

"""Pour un filtrage base sur l’utilisateur, il faut definir une mesure de la similarite entre utilisateurs, et une
facon d’agreger les notes attribuees par les utilisateurs similaires.
    Chercher des utilisateurs qui ont les memes comportements avec l'utilisateur a qui l'on souhaite faire des recommandations
    Utiliser les notes des utilisateurs similaires pour calculer une liste de recommandations pour cet utilisateur."""

# Lire le fichier csv incomplet et le mettre dans un tableau
def lecture_csv():
    n = 100
    m = 1000

    fichier = './toy_incomplet.csv'
    donnees = np.zeros((n, m))
    i = 0
    with open(fichier, 'rb') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        for row in spamreader:
            for j in range(m):
                donnees[i, j] = row[j]
            i += 1
    return donnees


# Lire le fichier csv complet et le mettre dans un tableau
def lecture_csvComplet():
    n = 100
    m = 1000

    fichier = './toy_complet.csv'
    donnees = np.zeros((n, m))
    i = 0
    with open(fichier, 'rb') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        for row in spamreader:
            for j in range(m):
                donnees[i, j] = row[j]
            i += 1
    return donnees

toyComplet = lecture_csvComplet()
donnees = lecture_csv()

# tableau intermediaire pour accelerer l'algorithme
tableauIntermediaire = np.zeros((100, 1000))
listeMoyennes = []
tabSimilarite = np.zeros((100, 100))


def tauKendall(user1, user2):
    lUser1 = []
    lUser2 = []
    for i in range(np.shape(donnees)[1]):
        if donnees[user1][i] != -1 and donnees[user2][i] != -1:
            lUser1.append(donnees[user1][i])
            lUser2.append(donnees[user2][i])
    tau, p_value = stats.kendalltau(lUser1,lUser2)
    if tau == 0:
        return p_value
    return tau

def remplirTabSimilarite():
    for i in range(np.shape(tabSimilarite)[0]):
        for j in range(np.shape(tabSimilarite)[0]):
            tabSimilarite[i][j] = tauKendall(i, j)
            print tabSimilarite[i][j]
    return tabSimilarite

def moyenneItems(user):
    somme = 0
    nombre = 0
    for i in range(np.shape(donnees)[1]):
        if donnees[user][i] != -1:
            somme += donnees[user][i]
            nombre += 1
    moyenne = somme / nombre
    return moyenne

def remplirListeMoyennes():
    for i in range(np.shape(donnees)[0]):
        listeMoyennes.append(moyenneItems(i))
    return listeMoyennes

def ponderationPremiere(user, item):
    num = 0
    den = 0
    for i in range(np.shape(donnees)[0]):
        if donnees[i][item] != -1:
            num += tabSimilarite[user][i] * (donnees[i][item] - listeMoyennes[i])
            den += fabs(tabSimilarite[user][i])
    return round(listeMoyennes[user] + num / den, 2)

def remplirTabInter():
    for i in range(np.shape(donnees)[0]):
        for j in range(np.shape(donnees)[1]):
            if donnees[i][j] == -1:
                tableauIntermediaire[i][j] = ponderationPremiere(i, j)
                print tableauIntermediaire[i][j]
    return tableauIntermediaire

def donneesCompletes():
    donneesCompletes = donnees
    for i in range(np.shape(donneesCompletes)[0]):
        for j in range(np.shape(donneesCompletes)[1]):
            if donneesCompletes[i][j] == -1:
                donneesCompletes[i][j] = tableauIntermediaire[i][j]
                print donneesCompletes[i][j]
    return donneesCompletes

# savoir si les items les plus aimes ou detestes sont plus note que les autres items
def frequence(item):
    ni = 0
    for i in range(np.shape(donnees)[0]):
        if donnees[i][item] != -1:
            ni += 1
    return log(100) / ni

# Cette suite d'instructions a permit de construire le tableau de donnes estimees
listeMoyennes = remplirListeMoyennes()
tabSimilarite = remplirTabSimilarite()
remplirTabInter()
donneesCompletes = donneesCompletes()

# pickle pour enregistrer nos objets : serialisation
with open('KendallUser', 'wb') as fichier:
    mon_pickler = pickle.Pickler(fichier)
    mon_pickler.dump(donneesCompletes)

